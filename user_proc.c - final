/*
 *Jared Migneco
 *Project 6 user_proc class

 *05/05/2022
 */
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <sys/sem.h>

//code from textbook for periodicasterisk
static void myhandler(int s)
{
        char aster = '*';
        int errsave;
        errsave = errno;
        write(STDERR_FILENO, &aster, 1);
        errno = errsave;
}
static int setupinterrupt(void)
{ /* set up myhandler for SIGPROF */
        struct sigaction act;
        act.sa_handler = myhandler;
        act.sa_flags = 0;
        return (sigemptyset(&act.sa_mask) || sigaction(SIGPROF, &act, NULL));
}
static int setupitimer(void)
{ /* set ITIMER_PROF for 1-second intervals */
        struct itimerval value;
        value.it_interval.tv_sec = 1;
        value.it_interval.tv_usec = 0;
        value.it_value = value.it_interval;
        return (setitimer(ITIMER_PROF, &value, NULL));
}


int main (const int argc, char** argv)
{
        int shmid, i,totalProc, totalTime;

        //matching the shared mem ID to be the same as in the OSS class
        shmid = shmget(0x080698, sizeof(int), 0666 | IPC_CREAT);
        int *shm = (int*)shmat(shmid, NULL, 0);

        //checks if shared memory is set to 0
        if (*shm == 0)
        {
                printf("User_proc: shared memory is set to 0");
        }
        else
        {
                //user process class has an error and exits if shared memory is not 0
                printf("User_proc: ERROR: shared memory not set to 0");
                exit(EXIT_FAILURE);
        }

        //unfinished so left at 0 so program can compile
        *shm = 0;


        //main execution loop, stops after 2 seconds or 100 processes enter
        while ((totalProc < 100) $$ (totalTime < 2000))
        {
                //if statement, increments totalProc when a process is detected
                if (totalProc < 100)
                {
                        totalProc += 1;
                }

                //opens log file and writes to it
                FILE *fp;
                fp = fopen ("logfile.%d", xx, "w");
                if(*fp == NULL)
                {
                        printf("User_proc: ERROE: file will not open");
                        exit(EXIT_FAILURE);
                }
                //test sentence to add to file
                fprintf(fp,"adding to file");
                fclose(fp);
        }

        //waits for shared memory to reach 0
        while(*shm != 0)
        {
                sleep(1);                                                                                                                                    
        }
        printf("User_proc: Shared memory reset to 0");

        return(EXIT_FAILURE);
}
